AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  smart-garage-notifications

  Sample SAM Template for smart-garage-notifications

Parameters:
  ENVIRONMENT:
    Type: String
    Default: PreProduction
    AllowedValues:
      - PreProduction
      - Production
    Description: The stages based on CI/CD Pipeline in CodePipeline

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3

Resources:
  SmartGarageNotificationApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub SmartGarageNotificationApi-${ENVIRONMENT}
      StageName: !Sub ${ENVIRONMENT}
      Auth:
        ApiKeyRequired: True
        UsagePlan:
          CreateUsagePlan: PER_API
          UsagePlanName: SmartGarageNotificationApiUsagePlan
          Quota:
            Limit: 50
            Period: DAY
          Throttle:
            BurstLimit: 1
            RateLimit: 1

  SmartGarageNotificationFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: send_garage_alert/
      Handler: app.lambda_handler
      Runtime: python3.7
      Environment:
        Variables:
          SNSArn: !GetAtt GarageActivitySNSTopic.arn
      Events:
        GarageAlert:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /send_garage_alert
            Method: get
            RestApiId: !Ref SmartGarageNotificationApi
      Role: !GetAtt LambdaExecutionRole.Arn

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
            - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      Policies:
        - PolicyName: LambdaPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
                -
                  Effect: Allow
                  Action:
                    - "iam:CreateRole"
                    - "iam:PutRolePolicy"
                    - "iam:GetRolePolicy"
                    - "iam:DeleteRole"
                    - "iam:DeleteRolePolicy"
                    - "iam:GetRole"
                  Resource:
                    - "*"

  GarageActivitySNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: GarageActivityTextMessageNotification


Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  SmartGarageNotificationApi:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${SmartGarageNotificationApi}.execute-api.${AWS::Region}.amazonaws.com/hello/"
  SmartGarageNotificationFunction:
    Description: "Hello World Lambda Function ARN"
    Value: !GetAtt SmartGarageNotificationFunction.Arn
  GarageActivitySNSTopic:
    Description: "Hello World Lambda Function ARN"
    Value: !GetAtt GarageActivitySNSTopic.Arn